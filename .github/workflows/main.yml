name: widget-server pipe ECR

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

env:
  CONTAINER_NAME: widget-server
  CLUSTER_NAME: widget-cluster
  SERVICE_NAME: widget-server-service

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Configure node
        id: node
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 22.13.0

      - name: Install dependencies
        id: install-dependencies
        run: npm install

      - name: Configure AWS credentials via OIDC
        id: aws-credentials-oidc
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Set up Docker Buildx
        id: setup-docker-buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate tag
        id: generate-tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Build image to scan
        id: build-scan-image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:scan

      - name: Aqua Security Trivy
        id: run-trivy-scan
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:scan"
          format: "table"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"

      - name: Build and push the image to AWS ECR
        id: build-push-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=gha
          platforms: linux/amd64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}

      # - name: Deploy to App Runner Image
      #   id: deploy-apprunner
      #   uses: awslabs/amazon-app-runner-deploy@main
      #   with:
      #     service: widget-server
      #     image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}
      #     region: ${{ vars.AWS_REGION }}
      #     access-role-arn: ${{ secrets.AWS_APP_RUNNER_ROLE_ARN }}
      #     cpu: 1
      #     memory: 2
      #     port: 3333
      #     wait-for-service-stability-seconds: 240

      - name: Render task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}

      - name: Deploy to ECS
        id: deploy-amazon-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Inspect Image
        run: docker buildx imagetools inspect ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}
